
# adtech-backend/src/main/resources/application.properties

# DataSource Configuration for Render.com PostgreSQL
# Use Render's individual connection variables for cleaner setup
spring.datasource.url=jdbc:postgresql://${PGHOST:localhost}:${PGPORT:5432}/${PGDATABASE:adtech_reporting}
spring.datasource.username=${PGUSER:AdReportingData}
spring.datasource.password=${PGPASSWORD:}
spring.datasource.driver-class-name=org.postgresql.Driver

# PostgreSQL specific configurations
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# JPA Configuration - Create table if not exists, then validate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.open-in-view=false
spring.devtools.livereload.enabled=false


# Server Port - PORT will be set dynamically via JVM argument in Dockerfile
# server.port=${PORT:8091}  # Commented out - using JVM argument instead
# Render requires binding to 0.0.0.0
server.address=0.0.0.0
server.tomcat.connection-timeout=120000
server.tomcat.max-http-post-size=40MB

############
server.servlet.session.timeout=1800

# Production logging configuration
spring.jpa.properties.hibernate.format_sql=false
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.com.adtech.reportingsystem.service.ReportService=INFO
logging.level.com.adtech.reportingsystem.service.CsvImportService=INFO

# For large requests with Tomcat, this can be an additional bottleneck.
# Set it to a large value to prevent it from causing issues.



# Production web logging
logging.level.org.springframework.web.servlet.DispatcherServlet=WARN
logging.level.org.springframework.web.servlet.mvc.method=WARN
logging.level.org.springframework.web.servlet.handler=WARN
logging.level.org.springframework.web.multipart=WARN

# Root logging level for production
logging.level.root=WARN




## HikariCP Connection Pool Configuration
#spring.datasource.hikari.maximum-pool-size=20
#spring.datasource.hikari.idle-timeout=300000
#spring.datasource.hikari.connection-timeout=30000
#spring.datasource.hikari.max-lifetime=1800000
#spring.datasource.hikari.connection-test-query=SELECT 1

# Spring Data JPA Batching
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# Multipart File Upload Configuration
spring.servlet.multipart.enabled=true
# Set the maximum allowed size for a single uploaded file.
spring.servlet.multipart.max-file-size=500MB

# Set the maximum size of a multipart request. This should be equal to or greater than max-file-size.
spring.servlet.multipart.max-request-size=500MB
server.tomcat.max-swallow-size=500MB


