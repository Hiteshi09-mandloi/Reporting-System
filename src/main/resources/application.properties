# adtech-backend/src/main/resources/application.properties

# DataSource Configuration for Render.com PostgreSQL
# Render will provide DATABASE_URL as environment variable
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/adtech_reporting}
spring.datasource.username=${DB_USER:nirajpatel}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=org.postgresql.Driver

# PostgreSQL specific configurations
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=false
spring.devtools.livereload.enabled=false
spring.batch.jdbc.initialize-schema=always
spring.batch.initialize-schema=always

spring.batch.job.enabled=false

# Server Port - Render will provide the PORT env var dynamically
server.port=${PORT:8091}
# Render requires binding to 0.0.0.0
server.address=0.0.0.0
server.tomcat.connection-timeout=120000
server.tomcat.max-http-post-size=40MB

# Logging and SQL formatting
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.com.adtech.reportingsystem.service.ReportService=DEBUG
logging.level.com.adtech.reportingsystem.service.CsvImportService=DEBUG

# For large requests with Tomcat, this can be an additional bottleneck.
# Set it to a large value to prevent it from causing issues.



# Logging levels for web aspects
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG
logging.level.org.springframework.web.servlet.mvc.method=DEBUG
logging.level.org.springframework.web.servlet.handler=DEBUG
logging.level.org.springframework.web.multipart=DEBUG




## HikariCP Connection Pool Configuration
#spring.datasource.hikari.maximum-pool-size=20
#spring.datasource.hikari.idle-timeout=300000
#spring.datasource.hikari.connection-timeout=30000
#spring.datasource.hikari.max-lifetime=1800000
#spring.datasource.hikari.connection-test-query=SELECT 1

# Spring Data JPA Batching
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# Multipart File Upload Configuration
spring.servlet.multipart.enabled=true
# Set the maximum allowed size for a single uploaded file.
spring.servlet.multipart.max-file-size=500MB

# Set the maximum size of a multipart request. This should be equal to or greater than max-file-size.
spring.servlet.multipart.max-request-size=500MB
server.tomcat.max-swallow-size=500MB